import datetime
import os
import fcntl
from collections import OrderedDict


class openextra:
    def __init__(self, date=None):
        self.field_names_formats = OrderedDict([
            ('Name', '\"%s\"'),
            ('Symbol', '\"%s\"'),
            ('Open', '%.4f'),
            ('High', '%.4f'),
            ('Low', '%.4f'),
            ('Close', '%.4f'),
            ('Net Chg', '%.4f'),
            ('% Chg', '%.4f'),
            ('Volume', '%d'),
            ('52 Wk High', '%.4f'),
            ('52 Wk Low', '%.4f'),
            ('Div', '%.4f'),
            ('Yield', '%.4f'),
            ('P/E', '%.4f'),
            ('YTD % Chg', '%.4f'),
        ])
        self.field_names = list(self.field_names_formats.keys())
        self.field_formats = self.field_names_formats

        if isinstance(date, datetime.date):
            parsed_date = date
        elif date:
            parsed_date = self._parse_date(date)
        else:
            parsed_date = datetime.date.today()

        self.date = parsed_date.strftime('%Y-%m-%d')
        self.filename = f"/home/dunc/data/eod/extra.{parsed_date.strftime('%Y%m%d')}.csv"
        self.rows = {}

        # Mimic file handling and locking from Perl
        self._open_and_load_file()

    def _parse_date(self, date_str):
        # This is a simplified version of Date::Manip's ParseDate
        # In a real-world scenario, you might use a more robust date parsing library
        try:
            return datetime.datetime.strptime(date_str, '%Y-%m-%d').date()
        except ValueError:
            pass
        try:
            return datetime.datetime.strptime(date_str, '%Y%m%d').date()
        except ValueError:
            pass
        # Add more date formats as needed
        return datetime.date.today()  # Fallback

    def _open_and_load_file(self):
        # Using 'r+' mode for read/write, creating if not exists
        # 'a+' could also work, but 'r+' with truncate is closer to Perl's logic
        # Use a+ to allow creating and reading
        self.fh = open(self.filename, 'a+')

        # Acquire an exclusive lock
        try:
            fcntl.flock(self.fh, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError as e:
            raise Exception(f"Can't lock {self.filename}: {e}")

        # Read existing data, skipping header lines
        self.fh.seek(0)  # Go to the beginning of the file to read
        lines = self.fh.readlines()

        # Skip the first 4 lines if they exist, similar to Perl's < $fh >
        if len(lines) >= 4:
            for line in lines[4:]:
                line = line.strip()
                if line:
                    parts = line.split(',')
                    # Assuming the symbol is the second field in the CSV
                    if len(parts) > 1:
                        # Remove quotes if present
                        symbol = parts[1].strip('\"')
                        if symbol:
                            self.rows[symbol] = parts
                        else:
                            raise Exception(
                                f"Missing symbol in {self.filename}: {line}\n")


    def printrow(self, **fields):
        symbol = fields.get('Symbol')
        if not symbol or symbol == '...' or symbol == '\"\"':
            raise ValueError("missing symbol in printrow")

        output_parts = []
        for i, fn in enumerate(self.field_names):
            if fn in fields and fields[fn] is not None:
                # Format the field based on its defined format
                if isinstance(self.field_formats[fn], str):
                    output_parts.append(self.field_formats[fn] % fields[fn])
                else:
                    # This case should ideally not happen if formats are always strings
                    output_parts.append(str(fields[fn]))
            elif symbol in self.rows and self.rows[symbol][i]:
                # Use fields existing value, if there is one
                output_parts.append(self.rows[symbol][i])
            else:
                # Use default placeholder if field is not defined
                if self.field_formats[fn] == '\"%s\"':
                    output_parts.append('\"\"')
                else:
                    output_parts.append('...')
        self.rows[symbol] = output_parts

    def write(self):
        # Truncate the file to prepare for writing new data
        self.fh.seek(0)
        self.fh.truncate(0)

        # Write header
        display_date = datetime.datetime.strptime(
            self.date, '%Y-%m-%d').strftime('%A, %B %d, %Y')
        self.fh.write("EXTRA closing data\n")
        self.fh.write(f"\"{display_date} 5:55 PM\"\n")
        self.fh.write("\n")
        self.fh.write(','.join(self.field_names) + "\n")

        # Write data lines
        for symbol in sorted(self.rows.keys()):
            line = ','.join(self.rows[symbol]) + "\n"
            self.fh.write(line)
        self.close()

    def close(self):
        if self.fh:
            self.fh.close()
        self.fh = None

    def get_filename(self):
        return self.filename

    def get_date(self):
        return self.date


# Example Usage (equivalent to a main script that would use openextra.pm)
if __name__ == "__main__":
    extra = None
    # Example 1: Using today's date
    print("--- Example 1: Using today's date ---")
    try:
        extra = openextra()
        print(f"File for today: {extra.get_filename()}")
        print(f"Date of data: {extra.get_date()}")

        extra.printrow(Name="Apple Inc.",
                       Symbol="AAPL",
                       Open=150.00,
                       High=155.50,
                       Low=149.80,
                       Close=155.00,
                       Net_Chg=5.00,
                       PCT_Chg=3.33,
                       Volume=10000000,
                       FiftyTwo_Wk_High=160.00,
                       FiftyTwo_Wk_Low=120.00,
                       Div=0.82,
                       Yield=0.53,
                       PE=28.5,
                       YTD_PCT_Chg=15.00)
        extra.printrow(Name="Google",
                       Symbol="GOOG",
                       Open=2500.00,
                       High=2550.00,
                       Low=2490.00,
                       Close=2540.00,
                       Net_Chg=40.00,
                       PCT_Chg=1.60,
                       Volume=5000000,
                       FiftyTwo_Wk_High=2600.00,
                       FiftyTwo_Wk_Low=2000.00,
                       Div=0.00,
                       Yield=0.00,
                       PE=30.0,
                       YTD_PCT_Chg=20.00)
        extra.write()
        print(f"Data written to {extra.get_filename()}")

    except Exception as e:
        print(f"Error: {e}")
    finally:
        extra.close()

    # Example 2: Specifying a date
    print("\n--- Example 2: Specifying a date ---")
    try:
        extra = openextra("2024-07-15")
        print(
            f"File for 2024-07-15: {extra.get_filename()}")
        print(f"Date of data: {extra.get_date()}")

        extra.printrow(Name="Microsoft", Symbol="MSFT", Open=300.00, High=305.00, Low=299.00, Close=304.50,
                                          Net_Chg=4.50, PCT_Chg=1.50, Volume=8000000, FiftyTwo_Wk_High=310.00,
                                          FiftyTwo_Wk_Low=250.00, Div=2.48, Yield=0.82, PE=35.0, YTD_PCT_Chg=18.00)
        extra.write()
        print(f"Data written to {extra.get_filename()}")

    except Exception as e:
        print(f"Error: {e}")
    finally:
        extra.close()

    # Example 3: Missing symbol error
    print("\n--- Example 3: Missing symbol error ---")
    try:
        extra = openextra()
        extra.printrow(
            Name="Invalid Entry", Open=10.0)  # Missing Symbol
        extra.write()

    except ValueError as e:
        print(f"Caught expected error: {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")
    finally:
        extra.close()

    # Example 4: Merge 
    print("\n--- Example 4: Merge ---")
    try:
        extra = openextra()
        print(f"File for today: {extra.get_filename()}")
        print(f"Date of data: {extra.get_date()}")
        extra.printrow(Name="Alphabet", Symbol="GOOG")
        extra.write()
        print(f"Data written to {extra.get_filename()}")

    except Exception as e:
        print(f"Error: {e}")
    finally:
        extra.close()
